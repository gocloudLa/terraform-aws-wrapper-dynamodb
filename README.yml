module_name: Terraform DynamoDB Module
module_description: The Terraform wrapper for AWS's DynamoDB service simplifies the configuration of the NoSQL database service in the cloud. This wrapper acts as a predefined template, making it easier to create and manage tables in DynamoDB by handling all the technical details.
module_badges:
  - url: "https://github.com/gocloudLa/terraform-aws-wrapper-dynamodb/releases/latest"
    image: "https://img.shields.io/github/v/release/gocloudLa/terraform-aws-wrapper-dynamodb.svg?style=for-the-badge"
    alt: "Latest Release"
  - url: ""
    image: "https://img.shields.io/github/last-commit/gocloudLa/terraform-aws-wrapper-dynamodb.svg?style=for-the-badge"
    alt: "Last Commit"
  - url: "https://registry.terraform.io/modules/gocloudLa/wrapper-dynamodb/aws"
    image: "https://img.shields.io/badge/Terraform-Registry-7B42BC?style=for-the-badge&logo=terraform&logoColor=white"
    alt: "Terraform Registry"
quick_start: |
  ```hcl
  dynamodb_parameters = {
    "00" = {
      ## Required values for the table
      hash_key            = "id"
      range_key           = "title"
      billing_mode        = "PROVISIONED"
      table_class         = "STANDARD"
      read_capacity       = 10
      write_capacity      = 10
  
      ## Attributes for new columns
      attributes = [
        {
          name = "id"
          type = "N"
        },
        {
          name = "title"
          type = "S"
        },
        {
          name = "age"
          type = "N"
        }
      ]
    }
  }
  dynamodb_defaults = var.dynamodb_defaults
  ```
features:
  - icon: üìà
    title: Index Autoscaling
    short_description: Allows to define an auto-scaling policy for indexes to adapt to different use cases.
    long_description: |
      Allows to define an auto-scaling policy for indexes to adapt to different use cases.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          dynamodb_parameters = {
            "00" = {
              ...
              ## Index auto-scaling configuration
              #autoscaling_indexes = {
              #  TitleIndex = {
              #    read_max_capacity  = 10
              #    read_min_capacity  = 5
              #    write_max_capacity = 10
              #    write_min_capacity = 5
              #  }
              #}
              ## Auto-scaling threshold configuration
              #autoscaling_defaults = {
              #  scale_in_cooldown  = 0
              #  scale_out_cooldown = 0
              #  target_value       = 70
              #}
              ## Secondary index configuration
              # global_secondary_indexes = [
              #   {
              #     name               = "TitleIndex"
              #     hash_key           = "title"
              #     range_key          = "age"
              #     projection_type    = "INCLUDE"
              #     non_key_attributes = ["id"]
              #     write_capacity     = 10
              #     read_capacity      = 10
              #   }
              # ]
            }
          }
          ```
  - icon: üåç
    title: Replication in another Region
    short_description: Enable global replication of tables in the specified regions.
    long_description: |
      Enable global replication of tables in the specified regions.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          resource "aws_kms_key" "secondary" {
            provider = aws.use2
            description = "CMK for secondary region"
          }
          dynamodb_parameters = {
            "00" = {
              ...
              #replica_regions = [{
              #    region_name    = "us-east-2"
              #    kms_key_arn    = aws_kms_key.secondary.arn
              #    propagate_tags = true
              #  }
              #]
            }
          }
          ```
  - icon: üìö
    title: Declaration of secondary global and local indexes
    short_description: Allows to define secondary indexes in the table.
    long_description: |
      Allows to define secondary indexes in the table.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          resource "aws_kms_key" "secondary" {
            provider = aws.use2
            description = "CMK for secondary region"
          }
          dynamodb_parameters = {
            "00" = {
              ...
              #global_secondary_indexes = [
              #  {
              #    name               = "TitleIndex"
              #    hash_key           = "title"
              #    range_key          = "age"
              #    projection_type    = "INCLUDE"
              #    non_key_attributes = ["id"]
              #    write_capacity     = 10
              #    read_capacity      = 10
              #  }
              #]
              #local_secondary_indexes = [
              #  {
              #    name               = "TitleLocalIndex"
              #    range_key          = "age"
              #    projection_type    = "INCLUDE"
              #    non_key_attributes = ["age", "id"]
              #  }
              #]
            }
          }
          ```
  - icon: üìÑ
    title: Define resource policy in the table
    short_description: Allows you to define fine-grained access permissions on the table.
    long_description: |
      Allows you to define fine-grained access permissions on the table, controlling which principals can perform which actions.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          resource_policy = jsonencode({
                  Version = "2012-10-17",
                  Statement = [
                    {
                      Sid    = "AllowAllReadActions",
                      Effect = "Allow",
                      Principal = {
                        AWS = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"
                      },
                      Action = [
                        "dynamodb:GetItem",
                        "dynamodb:Query",
                        "dynamodb:Scan"
                      ],
                      Resource = "arn:aws:dynamodb:${data.aws_region.current.region}:${data.aws_caller_identity.current.account_id}:table/${local.common_name}-${local.project}-<object_key>"
                    }
                  ]
                })
          ```
  - icon: üìä
    title: Define On Demand Throughput for the table and secondary global indexes
    short_description: Allows configuring On-Demand Throughput for the table and its Global Secondary Indexes.
    long_description: |
      Allows configuring On-Demand Throughput (max read/write request units) for the table and its Global Secondary Indexes.
    examples:
      - title: Configuration Code
        code: |
          ```hcl
          global_secondary_indexes = [
                  {
                    name               = "TitleIndex"
                    hash_key           = "title"
                    range_key          = "age"
                    projection_type    = "INCLUDE"
                    non_key_attributes = ["id"]
          
                    # On-demand throughput configuration inside the GSI block
                    on_demand_throughput = {
                    max_write_request_units = 2
                    max_read_request_units  = 2
                    }
                  }
                ]
          # On-demand throughput configuration at the table level
          on_demand_throughput = {
                  max_write_request_units = 2
                  max_read_request_units  = 2
                }
          ```
important_notes: |
  - **‚ö†Ô∏è Declare Secondary KMS Provider:** For table replication, you must declare a secondary AWS provider, as each replica needs a regional KMS key, either newly created or referenced via a datasource.
  - **‚ö†Ô∏è Global vs Local Index Performance:** Understand the performance difference between global and local indexes, and use cases requiring intensive indexing.
  - **‚ö†Ô∏è Avoid Overly Permissive AWS Principal:** When defining a resource policy for a table, Do not use `"*"` as the AWS Principal, as it is too permissive and will be rejected by the AWS API.
  - **‚ö†Ô∏è Managing On-Demand Throughput Setting:** Once enabled, the On-Demand Throughput feature cannot be removed; set `max_write_request_units` and `max_read_request_units` to `-1` to disable it. This is due to how the module manages state.
input_table: |
  | create_table | Controls if DynamoDB table and associated resources are created | `bool` | `true` | no |
  | name | Name of the DynamoDB table | `string` | `"${local.common_name}-${each.key}"` | no |
  | attributes | List of nested attribute definitions. Only required for hash_key and range_key attributes. | `list` | `[]` | no |
  | hash_key | The attribute to use as the hash (partition) key. Must also be defined as an attribute | `string` | `null` | no |
  | range_key | The attribute to use as the range (sort) key. Must also be defined as an attribute | `string` | `null` | no |
  | billing_mode | Controls how you are billed for read/write throughput and how you manage capacity. | `string` | `"PAY_PER_REQUEST"` | no |
  | write_capacity | The number of write units for this table. | `number` | `null` | no |
  | read_capacity | The number of read units for this table. | `number` | `null` | no |
  | point_in_time_recovery_enabled | Whether to enable point-in-time recovery | `bool` | `false` | no |
  | point_in_time_recovery_period_in_days | Number of preceding days for which continuous backups are taken and maintained. Default 35 | `number` | `null` | no |
  | ttl_enabled | Indicates whether ttl is enabled | `bool` | `false` | no |
  | ttl_attribute_name | The name of the table attribute to store the TTL timestamp in | `string` | `""` | no |
  | global_secondary_indexes | Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc. | `list` | `[]` | no |
  | local_secondary_indexes | Describe an LSI on the table; these can only be allocated at creation. | `list` | `[]` | no |
  | replica_regions | Region names for creating replicas for a global DynamoDB table. | `list` | `[]` | no |
  | stream_enabled | Indicates whether Streams are to be enabled | `bool` | `false` | no |
  | stream_view_type | When an item in the table is modified, StreamViewType determines what information is written to the table's stream. | `string` | `null` | no |
  | server_side_encryption_enabled | Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK) | `bool` | `false` | no |
  | server_side_encryption_kms_key_arn | The ARN of the CMK that should be used for the AWS KMS encryption. | `string` | `null` | no |
  | timeouts | Updated Terraform resource management timeouts | `map` | `{ create = "10m", update = "60m", delete = "10m" }` | no |
  | autoscaling_enabled | Whether or not to enable autoscaling. | `bool` | `false` | no |
  | autoscaling_defaults | A map of default autoscaling settings | `map` | `{ scale_in_cooldown = 0, scale_out_cooldown = 0, target_value = 70 }` | no |
  | autoscaling_read | A map of read autoscaling settings. max_capacity is the only required key. | `map` | `{}` | no |
  | autoscaling_write | A map of write autoscaling settings. max_capacity is the only required key. | `map` | `{}` | no |
  | autoscaling_indexes | A map of index autoscaling configurations. | `map` | `{}` | no |
  | table_class | The storage class of the table. | `string` | `null` | no |
  | deletion_protection_enabled | Enables deletion protection for table | `bool` | `null` | no |
  | import_table | Configurations for importing s3 data into a new table | `map` | `{}` | no |
  | restore_date_time | Time of the point-in-time recovery point to restore. | `string` | `null` | no |
  | restore_source_name | Name of the table to restore. Must match the name of an existing table. | `string` | `null` | no |
  | restore_source_table_arn | ARN of the source table to restore. Must be supplied for cross-region restores. | `string` | `null` | no |
  | restore_to_latest_time | If set, restores the table to the most recent point-in-time recovery point. | `bool` | `null` | no |
  | resource_policy | (Optional) The JSON definition of the resource-based policy. | `string` | `null` | no |
  | region | Region where this resource will be managed. Defaults to the Region set in the provider configuration | `string` | `null` | no |
  | on_demand_throughput | (Optional) Sets the maximum number of read and write units for the specified on-demand table. | `map` | `{}` | no |
